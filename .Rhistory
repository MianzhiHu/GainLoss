fit,
xlevels = setNames(list(seq(rng[1], rng[2], length.out = grid_n)), var)
)
out <- as.data.frame(ef)
out$predictor   <- var
out$model_label <- label %||% deparse(substitute(fit))
out
}
# Your fitted models
model_t          <- lmer(BestOption ~ t * Condition + model + (1|Subnum), data = model_summary)
model_alpha      <- lmer(BestOption ~ alpha * Condition + model + (1|Subnum), data = model_summary)
model_alpha_neg  <- lmer(BestOption ~ alpha_neg * Condition + model + (1|Subnum), data = model_summary)
model_scale      <- lmer(BestOption ~ scale * Condition + model + (1|Subnum), data = model_summary)
model_la         <- lmer(BestOption ~ la * Condition + model + (1|Subnum), data = model_summary)
model_weight     <- lmer(BestOption ~ weight * Condition + (1|Subnum), data = model_summary)
# Describe each extraction (fit, varying variable name, and a label)
jobs <- list(
list(fit = model_t,         var = "t",         label = "model_t"),
list(fit = model_alpha,     var = "alpha",     label = "model_alpha"),
list(fit = model_alpha_neg, var = "alpha_neg", label = "model_alpha_neg"),
list(fit = model_scale,     var = "scale",     label = "model_scale"),
list(fit = model_la,        var = "la",        label = "model_la"),
list(fit = model_weight,    var = "weight",    label = "model_weight")
)
# Run all and bind
effects_all <- map_dfr(
jobs,
~ get_int_effect(.x$fit, .x$var, data = model_summary, grid_n = 200, label = .x$label)
)
# Optional: make a consistent x-column for plotting if you like
# (keeps the original predictor column name too)
effects_all <- effects_all %>%
mutate(x = coalesce(!!!rlang::syms(unique(purrr::map_chr(jobs, "var")))))
# Save
write_csv(effects_all, "effects_all_models.csv")
library(ggplot2)
library(lme4)
library(lmerTest)
library(effects)
library(tidyr)
library(dplyr)
library(mgcv)
library(sjPlot)
library(segmented)
library(survival)
library(car)
library(emmeans)
library(nnet)
library(MASS)
library(lavaan)
library(ez)
library(semPlot)
library(purrr)
View(effects_all)
# Save
write_csv(effects_all, "effects_all_models.csv")
# Save
write.csv(effects_all, "effects_all_models.csv", row.names = FALSE)
for (nm in names(mods)) {
cat("\n====================\n")
cat("Model:", nm, "\n")
cat("====================\n")
print(summary(mods[[nm]]))
}
rng <- range(model_summary$BestOption, na.rm = TRUE)
rng <- range(model_summary$BestOption, na.rm = TRUE)
eff <- effect(
"t * Condition", model_t,
xlevels = list(BestOption_Baseline = seq(rng[1], rng[2], length.out = 200))
)
eff_df <- as.data.frame(eff)
View(eff_df)
eff <- effect(
"t * Condition", model_t,
xlevels = list(BestOption = seq(rng[1], rng[2], length.out = 200))
)
eff_df <- as.data.frame(eff)
View(eff_df)
# specify which predictor is the one interacting with Condition in each model
pred_vars <- c("t", "alpha", "alpha_neg", "scale", "la", "weight")
# loop and extract interaction effects
eff_list <- lapply(seq_along(mods), function(i) {
nm <- names(mods)[i]
var <- pred_vars[i]
fit <- mods[[i]]
rng <- range(model_summary[[var]], na.rm = TRUE)
ef <- effect(
paste0(var, ":Condition"),
fit,
xlevels = setNames(list(seq(rng[1], rng[2], length.out = 200)), var)
)
out <- as.data.frame(ef)
out$Parameter <- var
out$Model     <- nm
out
})
# combine into one data frame
eff_all <- do.call(rbind, eff_list)
# specify which predictor is the one interacting with Condition in each model
pred_vars <- c("t", "alpha", "alpha_neg", "scale", "la", "weight")
# loop and extract interaction effects
eff_list <- lapply(seq_along(mods), function(i) {
nm <- names(mods)[i]
var <- pred_vars[i]
fit <- mods[[i]]
print(nm, var, fit)
rng <- range(model_summary[[var]], na.rm = TRUE)
ef <- effect(
paste0(var, ":Condition"),
fit,
xlevels = setNames(list(seq(rng[1], rng[2], length.out = 200)), var)
)
out <- as.data.frame(ef)
out$Parameter <- var
out$Model     <- nm
out
})
# specify which predictor is the one interacting with Condition in each model
pred_vars <- c("t", "alpha", "alpha_neg", "scale", "la", "weight")
# loop and extract interaction effects
eff_list <- lapply(seq_along(mods), function(i) {
nm <- names(mods)[i]
var <- pred_vars[i]
fit <- mods[[i]]
print(nm)
print(var)
print(fit)
rng <- range(model_summary[[var]], na.rm = TRUE)
ef <- effect(
paste0(var, ":Condition"),
fit,
xlevels = setNames(list(seq(rng[1], rng[2], length.out = 200)), var)
)
out <- as.data.frame(ef)
out$Parameter <- var
out$Model     <- nm
out
})
# combine into one data frame
eff_all <- do.call(rbind, eff_list)
View(eff_list)
# specify which predictor is the one interacting with Condition in each model
pred_vars <- c("t", "alpha", "alpha_neg", "scale", "la", "weight")
# loop and extract interaction effects
eff_list <- lapply(seq_along(mods), function(i) {
nm  <- names(mods)[i]
var <- pred_vars[i]
fit <- mods[[i]]
rng <- range(model_summary[[var]], na.rm = TRUE)
ef  <- effects::effect(
paste0(var, ":Condition"),
fit,
xlevels = setNames(list(seq(rng[1], rng[2], length.out = 200)), var)
)
df  <- as.data.frame(ef)
# Create a unified predictor column and keep a consistent schema
df$Value     <- df[[var]]
keep_cols    <- intersect(c("Value","Condition","fit","lower","upper"), names(df))
df_out       <- df[ , keep_cols, drop = FALSE]
# Add identifiers
df_out$Parameter <- var
# Ensure final column order is identical across models
needed <- c("Value","Condition","fit","lower","upper","Parameter","Model")
missing <- setdiff(needed, names(df_out))
if (length(missing)) for (m in missing) df_out[[m]] <- NA_real_
df_out <- df_out[ , needed]
df_out
})
eff_all <- do.call(rbind, eff_list)
write.csv(eff_all, "./data/effects_all_models.csv", row.names = FALSE)
model_t <- lmer(BestOption ~ t * Condition + model + (1|Subnum), data = model_summary)
model_alpha <- lmer(BestOption ~ alpha * Condition + model + (1|Subnum), data = model_summary)
model_alpha_neg <- lmer(BestOption ~ alpha_neg * Condition + model + (1|Subnum), data = model_summary)
model_scale <- lmer(BestOption ~ scale * Condition + model + (1|Subnum), data = model_summary)
model_la <- lmer(BestOption ~ la * Condition + model + (1|Subnum), data = model_summary)
model_weight <- lmer(BestOption ~ weight * Condition + (1|Subnum), data = model_summary)
mods <- list(
t         = model_t,
alpha     = model_alpha,
alpha_neg = model_alpha_neg,
scale     = model_scale,
la        = model_la,
weight    = model_weight
)
for (nm in names(mods)) {
cat("\n====================\n")
cat("Model:", nm, "\n")
cat("====================\n")
print(summary(mods[[nm]]))
}
model <- lmer(Baseline ~ Frequency + parameter + model + (1|Subnum), data = wide_df)
summary(model)
plot(allEffects(model))
model <- lmer(BIC ~ BestOption_Baseline + (1|Subnum), data = model_data)
model <- glm(weight ~ BestOption * Condition, data = model_data)
model_list <- c('delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- glm(weight ~ BestOption_Baseline + training_accuracy, data = model_data)
summary(model)
plot(allEffects(model))
data <- read.csv("C:/Users/zuire/PycharmProjects/GainLoss/data/E2_summary_modeled.csv")
data$Condition <- factor(data$Condition, levels = c('Baseline', 'Frequency'))
data$TrialType <- factor(data$TrialType, levels = c('CA', 'AB', 'CD', 'CB', 'BD', 'AD'))
data$group_baseline <- factor(data$group_baseline, levels = c(1, 2, 3),
labels = c('Good Learner', 'Average Learner', 'Bad Learner'))
data$group_frequency <- factor(data$group_frequency, levels = c(1, 2, 3),
labels = c('Good Learner', 'Average Learner', 'Bad Learner'))
unique(data$group_frequency)
data$Gender <- factor(data$Gender, levels = c("Female", "Male", "Other", "Prefer not to answer"))
data$Ethnicity <- factor(data$Ethnicity, levels = c("Hispanic or Latino", "Not Hispanic or Latino","Prefer not to answer"))
data$Race <- factor(data$Race, levels = c("More than one Race", "White", "Asian",
"Prefer not to answer", "Black or African American",
"American Indian or Alaskan Native",
"Native Hawaiin or Other Pacific Islander"))
individual_data <- data %>%
dplyr::select(Subnum, group_baseline, prob1_baseline, prob2_baseline, prob3_baseline,
group_frequency, prob1_frequency, prob2_frequency, prob3_frequency,
Gender, Ethnicity, Race, Age, Big5O, Big5C,
Big5E, Big5A, Big5N, BISScore, CESDScore, ESIBF_disinhScore,
ESIBF_aggreScore, ESIBF_sScore, PSWQScore, STAITScore, STAISScore,
t, alpha, subj_weight,
t_All, alpha_All, subj_weight_All) %>%
distinct(Subnum, .keep_all = TRUE)
training <- data %>%
filter(TrialType%in%c('AB', 'CD'))
testing <- data %>%
filter(TrialType%in%c('CA', 'CB', 'BD', 'AD'))
BD <- data %>%
filter(TrialType == 'BD')
CB <- data %>%
filter(TrialType == 'CB')
AD <- data %>%
filter(TrialType == 'AD')
accuracy_wide <- data %>%
pivot_wider(id_cols = c(Subnum, TrialType, group_baseline, group_frequency,
C_diff, t_All, alpha_All, subj_weight_All),
names_from = Condition,
values_from = c(BestOption, training_accuracy, t, alpha, subj_weight))
accuracy_wide_CA <- accuracy_wide %>%
filter(TrialType == 'CA')
accuracy_wide_AB <- accuracy_wide %>%
filter(TrialType == 'AB')
CA <- data %>%
filter(TrialType == 'CA')%>%
left_join(accuracy_wide_CA %>% dplyr::select(Subnum, BestOption_Baseline),by = "Subnum")
baseline_CA <- CA %>%
filter(Condition == 'Baseline')
frequency_CA <- CA %>%
filter(Condition == 'Frequency')
order_effects_model <- lmer(BestOption ~ Condition + TrialType + order + (1|Subnum), data = data)
summary(order_effects_model)
plot(allEffects(order_effects_model))
order_effects_model <- lmer(BestOption ~ Condition * TrialType + order + (1|Subnum), data = data)
summary(order_effects_model)
plot(allEffects(order_effects_model))
order_effects_model <- lmer(BestOption ~ Condition + TrialType * order + (1|Subnum), data = data)
summary(order_effects_model)
plot(allEffects(order_effects_model))
order_effects_model <- lmer(BestOption ~ Condition + TrialType * order + (1|Subnum), data = data)
summary(order_effects_model)
plot(allEffects(order_effects_model))
View(model_summary)
model_summary <- read.csv("C:/Users/zuire/PycharmProjects/GainLoss/data/model_summary.csv")
model_summary <- model_summary %>%
left_join(CA %>% dplyr::select(Subnum, Condition, BestOption, BestOption_Baseline, training_accuracy),by = c("Subnum", "Condition"))
model_summary$Condition <- factor(model_summary$Condition, levels = c('Baseline', 'Frequency'))
model_summary_baseline <- model_summary %>%
filter(Condition == 'Baseline')
model_summary_frequency <- model_summary %>%
filter(Condition == 'Frequency')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
View(model_summary)
model_list <- c('delta_decay_win', 'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_data)
summary(model)
plot(allEffects(model))
model_list <- c('delta_decay_win', 'delta_decay_PVL_win', 'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
View(model_summary)
View(model_data)
model <- lmer(weight ~ BestOption_Baseline + training_accuracy + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- glmer(weight ~ BestOption_Baseline + training_accuracy + model, data = model_summary_frequency)
model <- glm(weight ~ BestOption_Baseline + training_accuracy + model, data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- glm(weight ~ BestOption_Baseline  + model, data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model_list <- c('delta_decay_win', 'delta_decay_PVL_win', 'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(BIC ~ BestOption_Baseline + model + (1|Subnum), data = model_data)
summary(model)
plot(allEffects(model))
model_summary <- read.csv("C:/Users/zuire/PycharmProjects/GainLoss/data/model_summary.csv")
model_summary <- model_summary %>%
left_join(CA %>% dplyr::select(Subnum, Condition, BestOption, BestOption_Baseline, training_accuracy),by = c("Subnum", "Condition"))
model_summary$Condition <- factor(model_summary$Condition, levels = c('Baseline', 'Frequency'))
model_summary_baseline <- model_summary %>%
filter(Condition == 'Baseline')
model_summary_frequency <- model_summary %>%
filter(Condition == 'Frequency')
model_list <- c('delta_decay_win', 'delta_decay_PVL_win', 'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model_list <- c('delta_decay_win',  'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_data)
summary(model)
plot(allEffects(model))
model_summary <- read.csv("C:/Users/zuire/PycharmProjects/GainLoss/data/model_summary.csv")
model_summary <- model_summary %>%
left_join(CA %>% dplyr::select(Subnum, Condition, BestOption, BestOption_Baseline, training_accuracy),by = c("Subnum", "Condition"))
model_summary$Condition <- factor(model_summary$Condition, levels = c('Baseline', 'Frequency'))
model_summary_baseline <- model_summary %>%
filter(Condition == 'Baseline')
model_summary_frequency <- model_summary %>%
filter(Condition == 'Frequency')
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model_list <- c('delta_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- glm(weight ~ BestOption * Condition, data = model_data)
View(model_data)
model <- glm(weight ~ BestOption_Baseline + training_accuracy, data = model_data)
summary(model)
plot(allEffects(model))
model <- glm(weight ~ BestOption_Baseline, data = model_data)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_data)
model_list <- c('delta_decay_win', 'delta_decay_PVL_win', 'delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_data)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline + model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum), data = model_summary_frequency)
summary(model)
plot(allEffects(model))
# Supplement
model_summary_frequency$model <- factor(
model_summary_frequency$model,
levels = c('delta_asymmetric_decay_win', 'delta_decay', 'delta_decay_PVL', 'delta_decay_win', 'delta_decay_PVL_win', ),
labels = c('DeltaAsymmetric-DecayWin', 'Delta-Decay', 'DeltaPVL-DecayPVL', 'Delta-DecayWin', 'DeltaPVL-DecayWin')
)
# Supplement
model_summary_frequency$model <- factor(
model_summary_frequency$model,
levels = c('delta_asymmetric_decay_win', 'delta_decay', 'delta_decay_PVL', 'delta_decay_win', 'delta_decay_PVL_win'),
labels = c('DeltaAsymmetric-DecayWin', 'Delta-Decay', 'DeltaPVL-DecayPVL', 'Delta-DecayWin', 'DeltaPVL-DecayWin')
)
all_hybrid_model <- lmer(weight ~ BestOption_Baseline * model + (1|Subnum),
data = model_summary_frequency)
# 3) Plot the interaction effect (one panel per model)
eff_int <- Effect(c("BestOption_Baseline", "model"), all_hybrid_model)
plt <- plot(
eff_int,
multiline = FALSE,
ci.style = "bands",
xlab = "% C Choices in Baseline",
ylab = "Delta Learning Weight",
main = "Delta Learning Weights By Baseline C Choice Rates"
)
print(plt)
plt <- plot(
eff_int,
multiline = FALSE,
ci.style = "bands",
xlab = "% C Choices in Baseline",
ylab = "Delta Learning Weight",
main = "Delta Learning Weights By Baseline C Choice Rates",
layout = c(3, 2)
)
print(plt)
plt <- plot(
eff_int,
multiline = FALSE,
ci.style = "bands",
xlab = "% C Choices in Baseline",
ylab = "Delta Learning Weight",
main = "Delta Learning Weights By Baseline C Choice Rates",
layout = c(2, 3)
)
print(plt)
View(testing)
model_list <- c('delta_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- glm(weight ~ BestOption_Baseline + training_accuracy, data = model_data)
model_list <- c('delta_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model_summary <- read.csv("C:/Users/zuire/PycharmProjects/GainLoss/data/model_summary.csv")
model_summary <- model_summary %>%
left_join(CA %>% dplyr::select(Subnum, Condition, BestOption, BestOption_Baseline, training_accuracy),by = c("Subnum", "Condition"))
model_summary$Condition <- factor(model_summary$Condition, levels = c('Baseline', 'Frequency'))
model_summary_baseline <- model_summary %>%
filter(Condition == 'Baseline')
model_summary_frequency <- model_summary %>%
filter(Condition == 'Frequency')
model_list <- c('delta_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model <- glm(weight ~ BestOption_Baseline + training_accuracy, data = model_data)
summary(model)
plot(allEffects(model))
model <- glm(weight ~ BestOption_Baseline, data = model_data)
summary(model)
plot(allEffects(model))
model <- glm(weight ~ BestOption_Baseline + training_accuracy, data = model_data)
summary(model)
plot(allEffects(model))
model <- glm(weight ~ BestOption_Baseline + training_accuracy + t + alpha + scale + la, data = model_data)
model <- glm(weight ~ BestOption_Baseline + training_accuracy + t + alpha, data = model_data)
summary(model)
plot(allEffects(model))
model_data_id <- model_data %>%
left_join(individual_data ,by = c("Subnum", "Condition"))
model_data_id <- model_data %>%
left_join(individual_data ,by = c("Subnum"))
model_list <- c('delta_asymmetric_decay_win')
model_data <- model_summary_frequency %>%
filter(model%in%model_list)
model_data_id <- model_data %>%
left_join(individual_data ,by = c("Subnum"))
model <- lmer(weight ~ Condition * (Age + Race + Ethnicity + Big5O + Big5C +
Big5E + Big5A + Big5N + BISScore + CESDScore + ESIBF_disinhScore
+ ESIBF_aggreScore + ESIBF_sScore + PSWQScore + STAITScore + STAISScore) + (1|Subnum), data = model_data_id)
model_data_id <- model_summary %>%
filter(model%in%model_list) %>%
left_join(individual_data ,by = c("Subnum"))
model <- lmer(weight ~ Condition * (Age + Race + Ethnicity + Big5O + Big5C +
Big5E + Big5A + Big5N + BISScore + CESDScore + ESIBF_disinhScore
+ ESIBF_aggreScore + ESIBF_sScore + PSWQScore + STAITScore + STAISScore) + (1|Subnum), data = model_data_id)
summary(model)
plot(allEffects(model))
library(ggplot2)
library(lme4)
library(lmerTest)
library(effects)
library(tidyr)
library(dplyr)
library(mgcv)
library(sjPlot)
library(segmented)
library(survival)
library(car)
library(emmeans)
library(nnet)
library(MASS)
library(lavaan)
library(ez)
library(semPlot)
library(purrr)
model <- glm(subj_weight ~ Gender + Ethnicity + Age + Race + Condition * (Big5O + Big5C +
Big5E + Big5A + Big5N + BISScore + CESDScore + ESIBF_disinhScore
+ ESIBF_aggreScore + ESIBF_sScore + PSWQScore + STAITScore + STAISScore),
data = CA)
summary(model)
plot(allEffects(model))
model <- lmer(weight ~ Condition * (Age + Race + Ethnicity + Big5O + Big5C +
Big5E + Big5A + Big5N + BISScore + CESDScore + ESIBF_disinhScore
+ ESIBF_aggreScore + ESIBF_sScore + PSWQScore + STAITScore + STAISScore) + (1|Subnum), data = model_data_id)
summary(model)
plot(allEffects(model))
model <- lmer(BestOption ~ Condition * (Age + Race + Ethnicity + Big5O + Big5C +
Big5E + Big5A + Big5N + BISScore + CESDScore + ESIBF_disinhScore
+ ESIBF_aggreScore + ESIBF_sScore + PSWQScore + STAITScore + STAISScore) + (1|Subnum), data = model_data_id)
summary(model)
plot(allEffects(model))
model <- lmer(BestOption ~ Condition * TrialType +
(1|Subnum), data = data)
summary(model)
plot(allEffects(model))
